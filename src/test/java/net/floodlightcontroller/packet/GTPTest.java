package net.floodlightcontroller.packet;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import net.floodlightcontroller.packet.gtp.AbstractGTP;
import net.floodlightcontroller.packet.gtp.GTPCPacket;
import net.floodlightcontroller.packet.gtp.GTPHeaderV1;
import net.floodlightcontroller.packet.gtp.GTPUPacket;

import org.junit.Test;

public class GTPTest {
	
	private byte[] expectedGTPHttpGET = new byte[] {
			
			(byte)0x08, (byte)0x68, (byte)0x08, (byte)0x68, (byte)0x00, (byte)0xa2, (byte)0x15, (byte)0xb2, (byte)0x32, (byte)0xff, (byte)0x00, (byte)0x92, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x01, (byte)0x00, (byte)0x02, (byte)0x00, (byte)0x00, (byte)0x45, (byte)0x00, (byte)0x00, (byte)0x8e, (byte)0x0d, (byte)0x2d, (byte)0x40, (byte)0x00, (byte)0x40, (byte)0x06,
			(byte)0x77, (byte)0x1f, (byte)0x0a, (byte)0x00, (byte)0xfe, (byte)0x02, (byte)0x82, (byte)0xed, (byte)0x2b, (byte)0x2e, (byte)0xad, (byte)0x40, (byte)0x00, (byte)0x50, (byte)0x35, (byte)0xf6,
			(byte)0x93, (byte)0x1a, (byte)0xc0, (byte)0x22, (byte)0x0f, (byte)0xd1, (byte)0x80, (byte)0x18, (byte)0x00, (byte)0xe5, (byte)0x2c, (byte)0x24, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x01,
			(byte)0x08, (byte)0x0a, (byte)0x00, (byte)0x38, (byte)0x9e, (byte)0x33, (byte)0x00, (byte)0x39, (byte)0xef, (byte)0x2b, (byte)0x47, (byte)0x45, (byte)0x54, (byte)0x20, (byte)0x2f, (byte)0x74,
			(byte)0x73, (byte)0x74, (byte)0x2f, (byte)0x76, (byte)0x69, (byte)0x64, (byte)0x65, (byte)0x6f, (byte)0x2e, (byte)0x6d, (byte)0x70, (byte)0x34, (byte)0x20, (byte)0x48, (byte)0x54, (byte)0x54,
			(byte)0x50, (byte)0x2f, (byte)0x31, (byte)0x2e, (byte)0x31, (byte)0x0d, (byte)0x0a, (byte)0x55, (byte)0x73, (byte)0x65, (byte)0x72, (byte)0x2d, (byte)0x41, (byte)0x67, (byte)0x65, (byte)0x6e,
			(byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x63, (byte)0x75, (byte)0x72, (byte)0x6c, (byte)0x2f, (byte)0x37, (byte)0x2e, (byte)0x33, (byte)0x35, (byte)0x2e, (byte)0x30, (byte)0x0d, (byte)0x0a,
			(byte)0x48, (byte)0x6f, (byte)0x73, (byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x31, (byte)0x33, (byte)0x30, (byte)0x2e, (byte)0x32, (byte)0x33, (byte)0x37, (byte)0x2e, (byte)0x34, (byte)0x33,
			(byte)0x2e, (byte)0x34, (byte)0x36, (byte)0x0d, (byte)0x0a, (byte)0x41, (byte)0x63, (byte)0x63, (byte)0x65, (byte)0x70, (byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x2a, (byte)0x2f, (byte)0x2a,
			(byte)0x0d, (byte)0x0a, (byte)0x0d, (byte)0x0a	
	};
	
	private byte[] expectedGTPHttp404 = new byte[] {
			
			(byte)0x08, (byte)0x68, (byte)0x08, (byte)0x68, (byte)0x02, (byte)0x09, (byte)0x17, (byte)0x19, (byte)0x32, (byte)0xff, (byte)0x01, (byte)0xf9, (byte)0x00, (byte)0x00,
			(byte)0x00, (byte)0x01, (byte)0x00, (byte)0x2f, (byte)0x00, (byte)0x00, (byte)0x45, (byte)0x00, (byte)0x01, (byte)0xf5, (byte)0xe0, (byte)0xfb, (byte)0x40, (byte)0x00, (byte)0x40, (byte)0x06,
			(byte)0xa1, (byte)0xe9, (byte)0x82, (byte)0xed, (byte)0x2b, (byte)0x2e, (byte)0x0a, (byte)0x00, (byte)0xfe, (byte)0x02, (byte)0x00, (byte)0x50, (byte)0xad, (byte)0x40, (byte)0xc0, (byte)0x22,
			(byte)0x0f, (byte)0xd1, (byte)0x35, (byte)0xf6, (byte)0x93, (byte)0x74, (byte)0x80, (byte)0x18, (byte)0x00, (byte)0xe3, (byte)0x26, (byte)0x51, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x01,
			(byte)0x08, (byte)0x0a, (byte)0x00, (byte)0x39, (byte)0xef, (byte)0x2b, (byte)0x00, (byte)0x38, (byte)0x9e, (byte)0x33, (byte)0x48, (byte)0x54, (byte)0x54, (byte)0x50, (byte)0x2f, (byte)0x31,
			(byte)0x2e, (byte)0x31, (byte)0x20, (byte)0x34, (byte)0x30, (byte)0x34, (byte)0x20, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64,
			(byte)0x0d, (byte)0x0a, (byte)0x44, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x3a, (byte)0x20, (byte)0x54, (byte)0x68, (byte)0x75, (byte)0x2c, (byte)0x20, (byte)0x30, (byte)0x39, (byte)0x20,
			(byte)0x4a, (byte)0x75, (byte)0x6c, (byte)0x20, (byte)0x32, (byte)0x30, (byte)0x31, (byte)0x35, (byte)0x20, (byte)0x31, (byte)0x34, (byte)0x3a, (byte)0x31, (byte)0x36, (byte)0x3a, (byte)0x31,
			(byte)0x36, (byte)0x20, (byte)0x47, (byte)0x4d, (byte)0x54, (byte)0x0d, (byte)0x0a, (byte)0x53, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x3a, (byte)0x20, (byte)0x41,
			(byte)0x70, (byte)0x61, (byte)0x63, (byte)0x68, (byte)0x65, (byte)0x2f, (byte)0x32, (byte)0x2e, (byte)0x34, (byte)0x2e, (byte)0x37, (byte)0x20, (byte)0x28, (byte)0x55, (byte)0x62, (byte)0x75,
			(byte)0x6e, (byte)0x74, (byte)0x75, (byte)0x29, (byte)0x0d, (byte)0x0a, (byte)0x43, (byte)0x6f, (byte)0x6e, (byte)0x74, (byte)0x65, (byte)0x6e, (byte)0x74, (byte)0x2d, (byte)0x4c, (byte)0x65,
			(byte)0x6e, (byte)0x67, (byte)0x74, (byte)0x68, (byte)0x3a, (byte)0x20, (byte)0x32, (byte)0x38, (byte)0x39, (byte)0x0d, (byte)0x0a, (byte)0x43, (byte)0x6f, (byte)0x6e, (byte)0x74, (byte)0x65,
			(byte)0x6e, (byte)0x74, (byte)0x2d, (byte)0x54, (byte)0x79, (byte)0x70, (byte)0x65, (byte)0x3a, (byte)0x20, (byte)0x74, (byte)0x65, (byte)0x78, (byte)0x74, (byte)0x2f, (byte)0x68, (byte)0x74,
			(byte)0x6d, (byte)0x6c, (byte)0x3b, (byte)0x20, (byte)0x63, (byte)0x68, (byte)0x61, (byte)0x72, (byte)0x73, (byte)0x65, (byte)0x74, (byte)0x3d, (byte)0x69, (byte)0x73, (byte)0x6f, (byte)0x2d,
			(byte)0x38, (byte)0x38, (byte)0x35, (byte)0x39, (byte)0x2d, (byte)0x31, (byte)0x0d, (byte)0x0a, (byte)0x0d, (byte)0x0a, (byte)0x3c, (byte)0x21, (byte)0x44, (byte)0x4f, (byte)0x43, (byte)0x54,
			(byte)0x59, (byte)0x50, (byte)0x45, (byte)0x20, (byte)0x48, (byte)0x54, (byte)0x4d, (byte)0x4c, (byte)0x20, (byte)0x50, (byte)0x55, (byte)0x42, (byte)0x4c, (byte)0x49, (byte)0x43, (byte)0x20,
			(byte)0x22, (byte)0x2d, (byte)0x2f, (byte)0x2f, (byte)0x49, (byte)0x45, (byte)0x54, (byte)0x46, (byte)0x2f, (byte)0x2f, (byte)0x44, (byte)0x54, (byte)0x44, (byte)0x20, (byte)0x48, (byte)0x54,
			(byte)0x4d, (byte)0x4c, (byte)0x20, (byte)0x32, (byte)0x2e, (byte)0x30, (byte)0x2f, (byte)0x2f, (byte)0x45, (byte)0x4e, (byte)0x22, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68, (byte)0x74,
			(byte)0x6d, (byte)0x6c, (byte)0x3e, (byte)0x3c, (byte)0x68, (byte)0x65, (byte)0x61, (byte)0x64, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x74, (byte)0x69, (byte)0x74, (byte)0x6c, (byte)0x65,
			(byte)0x3e, (byte)0x34, (byte)0x30, (byte)0x34, (byte)0x20, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64, (byte)0x3c, (byte)0x2f,
			(byte)0x74, (byte)0x69, (byte)0x74, (byte)0x6c, (byte)0x65, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x65, (byte)0x61, (byte)0x64, (byte)0x3e, (byte)0x3c, (byte)0x62,
			(byte)0x6f, (byte)0x64, (byte)0x79, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68, (byte)0x31, (byte)0x3e, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75,
			(byte)0x6e, (byte)0x64, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x31, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x70, (byte)0x3e, (byte)0x54, (byte)0x68, (byte)0x65, (byte)0x20, (byte)0x72,
			(byte)0x65, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x65, (byte)0x64, (byte)0x20, (byte)0x55, (byte)0x52, (byte)0x4c, (byte)0x20, (byte)0x2f, (byte)0x74, (byte)0x73,
			(byte)0x74, (byte)0x2f, (byte)0x76, (byte)0x69, (byte)0x64, (byte)0x65, (byte)0x6f, (byte)0x2e, (byte)0x6d, (byte)0x70, (byte)0x34, (byte)0x20, (byte)0x77, (byte)0x61, (byte)0x73, (byte)0x20,
			(byte)0x6e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x66, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64, (byte)0x20, (byte)0x6f, (byte)0x6e, (byte)0x20, (byte)0x74, (byte)0x68, (byte)0x69,
			(byte)0x73, (byte)0x20, (byte)0x73, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x2e, (byte)0x3c, (byte)0x2f, (byte)0x70, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68,
			(byte)0x72, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x61, (byte)0x64, (byte)0x64, (byte)0x72, (byte)0x65, (byte)0x73, (byte)0x73, (byte)0x3e, (byte)0x41, (byte)0x70, (byte)0x61, (byte)0x63,
			(byte)0x68, (byte)0x65, (byte)0x2f, (byte)0x32, (byte)0x2e, (byte)0x34, (byte)0x2e, (byte)0x37, (byte)0x20, (byte)0x28, (byte)0x55, (byte)0x62, (byte)0x75, (byte)0x6e, (byte)0x74, (byte)0x75,
			(byte)0x29, (byte)0x20, (byte)0x53, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x20, (byte)0x61, (byte)0x74, (byte)0x20, (byte)0x31, (byte)0x33, (byte)0x30, (byte)0x2e,
			(byte)0x32, (byte)0x33, (byte)0x37, (byte)0x2e, (byte)0x34, (byte)0x33, (byte)0x2e, (byte)0x34, (byte)0x36, (byte)0x20, (byte)0x50, (byte)0x6f, (byte)0x72, (byte)0x74, (byte)0x20, (byte)0x38,
			(byte)0x30, (byte)0x3c, (byte)0x2f, (byte)0x61, (byte)0x64, (byte)0x64, (byte)0x72, (byte)0x65, (byte)0x73, (byte)0x73, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x2f, (byte)0x62, (byte)0x6f,
			(byte)0x64, (byte)0x79, (byte)0x3e, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x74, (byte)0x6d, (byte)0x6c, (byte)0x3e, (byte)0x0a
			
	};
	
    private byte[] echoRequest = new byte[] { 
    		
    		(byte)0x08, (byte)0x4b, (byte)0x08, (byte)0x4b, (byte)0x00, (byte)0x14, (byte)0x88, (byte)0x2c, (byte)0x32, (byte)0x01, (byte)0x00, (byte)0x04, (byte)0x00, (byte)0x00,
    		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x00, (byte)0x00 };
    		
    private byte[] echoResponse = new byte[] { 
	
    		(byte)0x08, (byte)0x4b, (byte)0x08, (byte)0x4b, (byte)0x00, (byte)0x16, (byte)0x15, (byte)0x26, (byte)0x32, (byte)0x02, (byte)0x00, (byte)0x06, (byte)0x00, (byte)0x00,
    		(byte)0x00, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0e, (byte)0x01};

	private boolean debug = false;


	
    @Test
    public void testControlSerialize() {
    	
		IPacket echoReqPacket = new UDP()
				.setSourcePort((short) UDP.GTP_CONTROL_PORT.getPort())
				.setDestinationPort((short) UDP.GTP_CONTROL_PORT.getPort())
				.setChecksum((short) 0x882c)
				.setPayload(
						new GTPCPacket().setHeader(new GTPHeaderV1()
								.setProtocolType(true).setReserved(false)
								.setExtHeaderFlag(false)
								.setSequenceNumberFlag(true)
								.setnPDUNumberFlag(false)
								.setMessageType((byte) 0x01)
								.setTotalLength((short) 4).setTeid(0)
//								.setSequenceNumber((short) (0x2000)))
								.setSequenceNumber(new byte[] { (byte)0x20, (byte)0x00 }))
								);

		IPacket echoRespPacket = new UDP()
				.setSourcePort((short) UDP.GTP_CONTROL_PORT.getPort())
				.setDestinationPort((short) UDP.GTP_CONTROL_PORT.getPort())
				.setChecksum((short) 0x1526)
				.setPayload(
						new GTPCPacket().setHeader(new GTPHeaderV1()
								.setProtocolType(true).setReserved(false)
								.setExtHeaderFlag(false)
								.setSequenceNumberFlag(true)
								.setnPDUNumberFlag(false)
								.setMessageType((byte) 0x02)
								.setTotalLength((short) 6).setTeid(0)
								.setSequenceNumber(new byte[] { (byte)0x20, (byte)0x00 })
								.setRecoveryType((byte) 0x0e)
								.setRecoveryRestartCounter((byte) 0x01)));
        
        byte[] actualReq = echoReqPacket.serialize();
        byte[] actualResp = echoRespPacket.serialize();
      
        assertTrue(Arrays.equals(echoRequest, actualReq));
        assertTrue(Arrays.equals(echoResponse, actualResp));

    }
    
    @Test
    public void testDataSerialization() throws PacketParsingException{
    	
    	byte[] httpGETData = new byte[] {
    			
    			(byte)0x45, (byte)0x00, (byte)0x00, (byte)0x8e, (byte)0x0d, (byte)0x2d, (byte)0x40, (byte)0x00, (byte)0x40, (byte)0x06,
    			(byte)0x77, (byte)0x1f, (byte)0x0a, (byte)0x00, (byte)0xfe, (byte)0x02, (byte)0x82, (byte)0xed, (byte)0x2b, (byte)0x2e, (byte)0xad, (byte)0x40, (byte)0x00, (byte)0x50, (byte)0x35, (byte)0xf6,
    			(byte)0x93, (byte)0x1a, (byte)0xc0, (byte)0x22, (byte)0x0f, (byte)0xd1, (byte)0x80, (byte)0x18, (byte)0x00, (byte)0xe5, (byte)0x2c, (byte)0x24, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x01,
    			(byte)0x08, (byte)0x0a, (byte)0x00, (byte)0x38, (byte)0x9e, (byte)0x33, (byte)0x00, (byte)0x39, (byte)0xef, (byte)0x2b, (byte)0x47, (byte)0x45, (byte)0x54, (byte)0x20, (byte)0x2f, (byte)0x74,
    			(byte)0x73, (byte)0x74, (byte)0x2f, (byte)0x76, (byte)0x69, (byte)0x64, (byte)0x65, (byte)0x6f, (byte)0x2e, (byte)0x6d, (byte)0x70, (byte)0x34, (byte)0x20, (byte)0x48, (byte)0x54, (byte)0x54,
    			(byte)0x50, (byte)0x2f, (byte)0x31, (byte)0x2e, (byte)0x31, (byte)0x0d, (byte)0x0a, (byte)0x55, (byte)0x73, (byte)0x65, (byte)0x72, (byte)0x2d, (byte)0x41, (byte)0x67, (byte)0x65, (byte)0x6e,
    			(byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x63, (byte)0x75, (byte)0x72, (byte)0x6c, (byte)0x2f, (byte)0x37, (byte)0x2e, (byte)0x33, (byte)0x35, (byte)0x2e, (byte)0x30, (byte)0x0d, (byte)0x0a,
    			(byte)0x48, (byte)0x6f, (byte)0x73, (byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x31, (byte)0x33, (byte)0x30, (byte)0x2e, (byte)0x32, (byte)0x33, (byte)0x37, (byte)0x2e, (byte)0x34, (byte)0x33,
    			(byte)0x2e, (byte)0x34, (byte)0x36, (byte)0x0d, (byte)0x0a, (byte)0x41, (byte)0x63, (byte)0x63, (byte)0x65, (byte)0x70, (byte)0x74, (byte)0x3a, (byte)0x20, (byte)0x2a, (byte)0x2f, (byte)0x2a,
    			(byte)0x0d, (byte)0x0a, (byte)0x0d, (byte)0x0a
    	};
    	
    	byte[] http404Data = new byte[] {
    			
    			(byte)0x45, (byte)0x00, (byte)0x01, (byte)0xf5, (byte)0xe0, (byte)0xfb, (byte)0x40, (byte)0x00, (byte)0x40, (byte)0x06,
    			(byte)0xa1, (byte)0xe9, (byte)0x82, (byte)0xed, (byte)0x2b, (byte)0x2e, (byte)0x0a, (byte)0x00, (byte)0xfe, (byte)0x02, (byte)0x00, (byte)0x50, (byte)0xad, (byte)0x40, (byte)0xc0, (byte)0x22,
    			(byte)0x0f, (byte)0xd1, (byte)0x35, (byte)0xf6, (byte)0x93, (byte)0x74, (byte)0x80, (byte)0x18, (byte)0x00, (byte)0xe3, (byte)0x26, (byte)0x51, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x01,
    			(byte)0x08, (byte)0x0a, (byte)0x00, (byte)0x39, (byte)0xef, (byte)0x2b, (byte)0x00, (byte)0x38, (byte)0x9e, (byte)0x33, (byte)0x48, (byte)0x54, (byte)0x54, (byte)0x50, (byte)0x2f, (byte)0x31,
    			(byte)0x2e, (byte)0x31, (byte)0x20, (byte)0x34, (byte)0x30, (byte)0x34, (byte)0x20, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64,
    			(byte)0x0d, (byte)0x0a, (byte)0x44, (byte)0x61, (byte)0x74, (byte)0x65, (byte)0x3a, (byte)0x20, (byte)0x54, (byte)0x68, (byte)0x75, (byte)0x2c, (byte)0x20, (byte)0x30, (byte)0x39, (byte)0x20,
    			(byte)0x4a, (byte)0x75, (byte)0x6c, (byte)0x20, (byte)0x32, (byte)0x30, (byte)0x31, (byte)0x35, (byte)0x20, (byte)0x31, (byte)0x34, (byte)0x3a, (byte)0x31, (byte)0x36, (byte)0x3a, (byte)0x31,
    			(byte)0x36, (byte)0x20, (byte)0x47, (byte)0x4d, (byte)0x54, (byte)0x0d, (byte)0x0a, (byte)0x53, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x3a, (byte)0x20, (byte)0x41,
    			(byte)0x70, (byte)0x61, (byte)0x63, (byte)0x68, (byte)0x65, (byte)0x2f, (byte)0x32, (byte)0x2e, (byte)0x34, (byte)0x2e, (byte)0x37, (byte)0x20, (byte)0x28, (byte)0x55, (byte)0x62, (byte)0x75,
    			(byte)0x6e, (byte)0x74, (byte)0x75, (byte)0x29, (byte)0x0d, (byte)0x0a, (byte)0x43, (byte)0x6f, (byte)0x6e, (byte)0x74, (byte)0x65, (byte)0x6e, (byte)0x74, (byte)0x2d, (byte)0x4c, (byte)0x65,
    			(byte)0x6e, (byte)0x67, (byte)0x74, (byte)0x68, (byte)0x3a, (byte)0x20, (byte)0x32, (byte)0x38, (byte)0x39, (byte)0x0d, (byte)0x0a, (byte)0x43, (byte)0x6f, (byte)0x6e, (byte)0x74, (byte)0x65,
    			(byte)0x6e, (byte)0x74, (byte)0x2d, (byte)0x54, (byte)0x79, (byte)0x70, (byte)0x65, (byte)0x3a, (byte)0x20, (byte)0x74, (byte)0x65, (byte)0x78, (byte)0x74, (byte)0x2f, (byte)0x68, (byte)0x74,
    			(byte)0x6d, (byte)0x6c, (byte)0x3b, (byte)0x20, (byte)0x63, (byte)0x68, (byte)0x61, (byte)0x72, (byte)0x73, (byte)0x65, (byte)0x74, (byte)0x3d, (byte)0x69, (byte)0x73, (byte)0x6f, (byte)0x2d,
    			(byte)0x38, (byte)0x38, (byte)0x35, (byte)0x39, (byte)0x2d, (byte)0x31, (byte)0x0d, (byte)0x0a, (byte)0x0d, (byte)0x0a, (byte)0x3c, (byte)0x21, (byte)0x44, (byte)0x4f, (byte)0x43, (byte)0x54,
    			(byte)0x59, (byte)0x50, (byte)0x45, (byte)0x20, (byte)0x48, (byte)0x54, (byte)0x4d, (byte)0x4c, (byte)0x20, (byte)0x50, (byte)0x55, (byte)0x42, (byte)0x4c, (byte)0x49, (byte)0x43, (byte)0x20,
    			(byte)0x22, (byte)0x2d, (byte)0x2f, (byte)0x2f, (byte)0x49, (byte)0x45, (byte)0x54, (byte)0x46, (byte)0x2f, (byte)0x2f, (byte)0x44, (byte)0x54, (byte)0x44, (byte)0x20, (byte)0x48, (byte)0x54,
    			(byte)0x4d, (byte)0x4c, (byte)0x20, (byte)0x32, (byte)0x2e, (byte)0x30, (byte)0x2f, (byte)0x2f, (byte)0x45, (byte)0x4e, (byte)0x22, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68, (byte)0x74,
    			(byte)0x6d, (byte)0x6c, (byte)0x3e, (byte)0x3c, (byte)0x68, (byte)0x65, (byte)0x61, (byte)0x64, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x74, (byte)0x69, (byte)0x74, (byte)0x6c, (byte)0x65,
    			(byte)0x3e, (byte)0x34, (byte)0x30, (byte)0x34, (byte)0x20, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64, (byte)0x3c, (byte)0x2f,
    			(byte)0x74, (byte)0x69, (byte)0x74, (byte)0x6c, (byte)0x65, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x65, (byte)0x61, (byte)0x64, (byte)0x3e, (byte)0x3c, (byte)0x62,
    			(byte)0x6f, (byte)0x64, (byte)0x79, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68, (byte)0x31, (byte)0x3e, (byte)0x4e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x46, (byte)0x6f, (byte)0x75,
    			(byte)0x6e, (byte)0x64, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x31, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x70, (byte)0x3e, (byte)0x54, (byte)0x68, (byte)0x65, (byte)0x20, (byte)0x72,
    			(byte)0x65, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x65, (byte)0x64, (byte)0x20, (byte)0x55, (byte)0x52, (byte)0x4c, (byte)0x20, (byte)0x2f, (byte)0x74, (byte)0x73,
    			(byte)0x74, (byte)0x2f, (byte)0x76, (byte)0x69, (byte)0x64, (byte)0x65, (byte)0x6f, (byte)0x2e, (byte)0x6d, (byte)0x70, (byte)0x34, (byte)0x20, (byte)0x77, (byte)0x61, (byte)0x73, (byte)0x20,
    			(byte)0x6e, (byte)0x6f, (byte)0x74, (byte)0x20, (byte)0x66, (byte)0x6f, (byte)0x75, (byte)0x6e, (byte)0x64, (byte)0x20, (byte)0x6f, (byte)0x6e, (byte)0x20, (byte)0x74, (byte)0x68, (byte)0x69,
    			(byte)0x73, (byte)0x20, (byte)0x73, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x2e, (byte)0x3c, (byte)0x2f, (byte)0x70, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x68,
    			(byte)0x72, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x61, (byte)0x64, (byte)0x64, (byte)0x72, (byte)0x65, (byte)0x73, (byte)0x73, (byte)0x3e, (byte)0x41, (byte)0x70, (byte)0x61, (byte)0x63,
    			(byte)0x68, (byte)0x65, (byte)0x2f, (byte)0x32, (byte)0x2e, (byte)0x34, (byte)0x2e, (byte)0x37, (byte)0x20, (byte)0x28, (byte)0x55, (byte)0x62, (byte)0x75, (byte)0x6e, (byte)0x74, (byte)0x75,
    			(byte)0x29, (byte)0x20, (byte)0x53, (byte)0x65, (byte)0x72, (byte)0x76, (byte)0x65, (byte)0x72, (byte)0x20, (byte)0x61, (byte)0x74, (byte)0x20, (byte)0x31, (byte)0x33, (byte)0x30, (byte)0x2e,
    			(byte)0x32, (byte)0x33, (byte)0x37, (byte)0x2e, (byte)0x34, (byte)0x33, (byte)0x2e, (byte)0x34, (byte)0x36, (byte)0x20, (byte)0x50, (byte)0x6f, (byte)0x72, (byte)0x74, (byte)0x20, (byte)0x38,
    			(byte)0x30, (byte)0x3c, (byte)0x2f, (byte)0x61, (byte)0x64, (byte)0x64, (byte)0x72, (byte)0x65, (byte)0x73, (byte)0x73, (byte)0x3e, (byte)0x0a, (byte)0x3c, (byte)0x2f, (byte)0x62, (byte)0x6f,
    			(byte)0x64, (byte)0x79, (byte)0x3e, (byte)0x3c, (byte)0x2f, (byte)0x68, (byte)0x74, (byte)0x6d, (byte)0x6c, (byte)0x3e, (byte)0x0a
    			
    	};
    	
		IPacket httpGET = new UDP()
				.setSourcePort((short) UDP.GTP_CLIENT_PORT.getPort())
				.setDestinationPort((short) UDP.GTP_CLIENT_PORT.getPort())
				.setChecksum((short) 0x15b2)
				.setPayload(
						new GTPUPacket().setHeader(new GTPHeaderV1()
								.setProtocolType(true).setReserved(false)
								.setExtHeaderFlag(false)
								.setSequenceNumberFlag(true)
								.setnPDUNumberFlag(false)
								.setMessageType((byte) 0xff)
								.setTotalLength((short) 146)
								.setTeid(1)
								.setSequenceNumber(new byte[] { (byte)0x00, (byte)0x02 }))
								.setPayload(new IPv4().deserialize(httpGETData, 0, httpGETData.length)));
		
		
		IPacket http404 = new UDP()
		.setSourcePort((short) UDP.GTP_CLIENT_PORT.getPort())
		.setDestinationPort((short) UDP.GTP_CLIENT_PORT.getPort())
		.setChecksum((short) 0x1719)
		.setPayload(
				new GTPUPacket().setHeader(new GTPHeaderV1()
						.setProtocolType(true).setReserved(false)
						.setExtHeaderFlag(false)
						.setSequenceNumberFlag(true)
						.setnPDUNumberFlag(false)
						.setMessageType((byte) 0xff)
						.setTotalLength((short) 505)
						.setTeid(1)
						.setSequenceNumber(new byte[] { (byte)0x00, (byte)0x2f }))
						.setPayload(new IPv4().deserialize(http404Data, 0, http404Data.length)));
    	
        byte[] actualReq = httpGET.serialize();
        byte[] actualResp = http404.serialize();
      
        byteArrayToString(expectedGTPHttpGET);
        byteArrayToString(actualReq);
        
        compareArrays(expectedGTPHttpGET, actualReq);
        assertTrue(Arrays.equals(expectedGTPHttpGET, actualReq));
        assertTrue(Arrays.equals(expectedGTPHttp404, actualResp));
    }
    
    
    @Test
    public void testDeserializeControl() throws PacketParsingException{
    	
    	UDP echoReqPacket = new UDP();
    	echoReqPacket.deserialize(this.echoRequest, 0, this.echoRequest.length);
        
    	IPacket thePayload = echoReqPacket.getPayload();
        assertTrue(thePayload instanceof GTPCPacket);
        GTPCPacket gtpPacket = (GTPCPacket)thePayload;
        
    	assertTrue(gtpPacket.getVersion() == 1);
        
    	
    	UDP echoRespPacket = new UDP();
    	echoRespPacket.deserialize(this.echoResponse, 0, this.echoResponse.length);
    	thePayload = echoRespPacket.getPayload();
        assertTrue(thePayload instanceof GTPCPacket);
        gtpPacket = (GTPCPacket)thePayload;
        
    	assertTrue(gtpPacket.getVersion() == 1);
    	
    	
        byte[] actualReq = echoReqPacket.serialize();
        byte[] actualResp = echoRespPacket.serialize();
      
        assertTrue(Arrays.equals(echoRequest, actualReq));
        assertTrue(Arrays.equals(echoResponse, actualResp));
    }
    
    @Test
	public void testDeserializeData() throws PacketParsingException {

		IPacket httpGET = new UDP().deserialize(expectedGTPHttpGET, 0, expectedGTPHttpGET.length);
    	IPacket thePayload = httpGET.getPayload();
        assertTrue(thePayload instanceof GTPUPacket);
        GTPUPacket gtpPacket = (GTPUPacket)thePayload;
        
    	assertTrue(gtpPacket.getVersion() == 1);


		IPacket http404 = new UDP().deserialize(expectedGTPHttp404, 0, expectedGTPHttp404.length);
    	thePayload = http404.getPayload();
        assertTrue(thePayload instanceof GTPUPacket);
        gtpPacket = (GTPUPacket)thePayload;
        
    	assertTrue(gtpPacket.getVersion() == 1);
    	
		byte[] actualReq = httpGET.serialize();
		byte[] actualResp = http404.serialize();

		byteArrayToString(expectedGTPHttpGET);
		byteArrayToString(actualReq);

		compareArrays(expectedGTPHttpGET, actualReq);
		assertTrue(Arrays.equals(expectedGTPHttpGET, actualReq));
		assertTrue(Arrays.equals(expectedGTPHttp404, actualResp));
	}
    
    @Test
    public void testGetNextSequenceNumber(){
    	
    	
    	AbstractGTP echoRespPacket = new GTPCPacket().setHeader(new GTPHeaderV1()
						.setProtocolType(true).setReserved(false)
						.setExtHeaderFlag(false)
						.setSequenceNumberFlag(true)
						.setnPDUNumberFlag(false)
						.setMessageType((byte) 0x02)
						.setTotalLength((short) 6).setTeid(0)
						.setSequenceNumber(new byte[] { (byte)0x20, (byte)0x00 })
						.setRecoveryType((byte) 0x0e)
						.setRecoveryRestartCounter((byte) 0x01));
		
		assertTrue(Arrays.equals(echoRespPacket.getHeader().getSequenceNumber(), new byte[] { (byte)0x20, (byte)0x00 }));
		byte[] next = echoRespPacket.getHeader().getNextSequenceNumber();
		
        byteArrayToString(echoRespPacket.getHeader().getSequenceNumber());
        byteArrayToString(next);
		assertTrue(Arrays.equals(next, new byte[] { (byte)0x20, (byte)0x01 }));
		


		
		echoRespPacket.setHeader(new GTPHeaderV1().setProtocolType(true)
				.setReserved(false).setExtHeaderFlag(false)
				.setSequenceNumberFlag(true).setnPDUNumberFlag(false)
				.setMessageType((byte) 0x02)
				.setTotalLength((short) 6)
				.setTeid(0)
				.setSequenceNumber(new byte[] { (byte) 0xff, (byte) 0xfe })
				.setRecoveryType((byte) 0x0e)
				.setRecoveryRestartCounter((byte) 0x01));
		
		assertTrue(Arrays.equals(echoRespPacket.getHeader().getSequenceNumber(), new byte[] { (byte)0xff, (byte)0xfe }));
        byteArrayToString(echoRespPacket.getHeader().getSequenceNumber());
		next = echoRespPacket.getHeader().getNextSequenceNumber();

        byteArrayToString(next);
		assertTrue(Arrays.equals(next, new byte[] { (byte)0xff, (byte)0xff }));
		
		echoRespPacket.setHeader(new GTPHeaderV1().setProtocolType(true)
				.setReserved(false).setExtHeaderFlag(false)
				.setSequenceNumberFlag(true).setnPDUNumberFlag(false)
				.setMessageType((byte) 0x02)
				.setTotalLength((short) 6)
				.setTeid(0)
				.setSequenceNumber(new byte[] { (byte) 0xff, (byte) 0xff })
				.setRecoveryType((byte) 0x0e)
				.setRecoveryRestartCounter((byte) 0x01));
		
		assertTrue(Arrays.equals(echoRespPacket.getHeader().getSequenceNumber(), new byte[] { (byte)0xff, (byte)0xff }));
        byteArrayToString(echoRespPacket.getHeader().getSequenceNumber());
		next = echoRespPacket.getHeader().getNextSequenceNumber();

        byteArrayToString(next);
		assertTrue(Arrays.equals(next, new byte[] { (byte)0x00, (byte)0x00 }));
		
    }
    
    
    private void byteArrayToString(byte[] array){
    	if(!debug){
    		return;
    	}
    	
        System.out.println("-----");

    	for (int i = 0; i < array.length; i++) {
    		System.out.print(String.format("%02X ", array[i])+ " ");
    		if(i % 16 == 0){
    			System.out.println();
    		}
		}
    	System.out.println();
        System.out.println("-----");

    }
    
    private void compareArrays(byte[] array1, byte[] array2){
    	if(!debug){
    		return;
    	}
    	
    	if(array1.length != array2.length){
    		System.out.println("Different sizes!");
    	}
    	
    	for (int i = 0; i < array2.length; i++) {
			if(array1[i] != array2[i]){
				System.out.println("Difference in "+i);
			}
		}
    }

}
